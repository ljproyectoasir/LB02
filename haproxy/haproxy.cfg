# definicion global
global
        # definimos el log local mediante socket
        log /dev/log syslog
        # numero maximo de conexiones globales
        maxconn 4096
        # usuario y grupo que ejecuta haproxy
        user haproxy
        group haproxy
        # indicamos que se va a ejecutar como demonio/servicio
        daemon
        # indicamos el path del fichero de PID
        pidfile /var/run/haproxy/haproxy.pid
        # con esta directiva habilitamos el uso de estad√≠sticas por socket
        stats socket /var/run/haproxy/haproxy_stats.socket


# configuracion por defecto que se aplica a todos los frontend salvo si sobreescribe
defaults
        ### se usa el log definido en la seccion global ###
        log global
        ### indicamos que el modo es http ya que se trata de un balanceador web ###
        mode http
        ### indicamos el numero de reintentos de chequeo de un servidor de backend antes de darlo por muerto ###
        retries 3
        ### permite que un cliente sea redirigido si tiene persistencia en un servidor de backend que se cae ###
        option redispatch
        ### numero maximo de conexiones en el balanceador ###
        maxconn 4096
        ### timeouts en milisegundos ###
        ### tiempo maximo para conectar a un servidor de backend ###
        timeout connect 10000
        ### tiempo que esperamos a un cliente inactivo ###
        timeout client 50000
        ### tiempo que esperamos a un servidor inactivo ###
        timeout server 50000

### definimos un nuevo proxy (listen) para acceder a las estadisticas de haproxy mediante web ###
listen stats  192.168.1.215:1935
        ### indicamos que el frontend es de tipo HTTP ###
        mode http
        ### activamos las estadisticas ###
        stats enable
        ### ocultamos la version en las estadisticas ###
        stats hide-version
        ### indicamos la URL sobre la que estan accesibles las estadisticas y el tiempo de refresco automatico ###
        stats uri /
        stats refresh 10s


### definimos el balanceador HTTP y HTTPS mediante un proxy definido con listen ###
listen Web
        ### IP y puerto en el que escucha y certificado para HTTPS ###
        bind 192.168.1.215:80
        bind 192.168.1.215:443 ssl crt /etc/haproxy/certs/elmuro.pem
        ### indica el algoritmo de balanceo utilizado, rounrobin incluye peso ###
        balance roundrobin
        ### checkeo para comprobar si el server esta UP ###
        option httpchk GET /haproxy.html


        ### check provoca que los servidores sean comprobados cada cierto tiempo para mantenerlos activos ###
        ### inter indica el tiempo en milisengundos entre chequeos ###
        ### rise indica el numero de chequeos positivos consecutivos necesarios para considerar el servidor backend online ###
        ### fall indica el numero de chequeos negativos consecutivos necesarios para considerar el servidor backend caido ###
        ### weight indica el peso del servidor de backend dentro del conjunto ###

        ### con el parametro backup este servidor solo se activara si el resto de servidores de backend estan caidos ###
        server Varys 192.168.1.202:80 backup check inter 2000 rise 2 fall 3 weight 20

        server Tywin 10.0.20.10:80 check inter 2000 rise 2 fall 3 weight 20
        server Jaime 10.0.20.20:80 check inter 2000 rise 2 fall 3 weight 20

